local ffi = require "ffi"
local gb_graph = require "gb.graph"
local gb_io = require "gb.io" 
local gb_basic = require "gb.basic" 
local gb_books = require "gb.books" 
local gb_econ = require "gb.econ" 
local gb_games = require "gb.games" 
local gb_gates = require "gb.gates" 
local gb_lisa = require "gb.lisa" 
local gb_miles = require "gb.miles" 
local gb_plane = require "gb.plane" 
local gb_raman = require "gb.raman" 
local gb_rand = require "gb.rand" 
local gb_roget = require "gb.roget" 
local gb_save = require "gb.save" 
local gb_words = require "gb.words" 
local str = ffi.string
local NULL = ffi.null


local function printf (...)
   io.write(string.format(...))
end


local pr_vert, pr_arc, pr_util


local function print_sample (g, n)
   print()
   
   if g == NULL then
      print("Ooops, we just ran into panic code "..gb_graph.panic_code.."!")
      if io_errors then
         print("(The I/O error code is 0x"..gb_io.io_errors)
      end
   else
      printf("\"%s\"\n%d vertices, %d arcs, util_types %s",
             str(g.id), tonumber(g.n), tonumber(g.m), str(g.util_types))
      pr_util(g.uu, g.util_types[8], 0, g.util_types)
      pr_util(g.vv, g.util_types[9], 0, g.util_types)
      pr_util(g.ww, g.util_types[10], 0, g.util_types)
      pr_util(g.xx, g.util_types[11], 0, g.util_types)
      pr_util(g.yy, g.util_types[12], 0, g.util_types)
      pr_util(g.zz, g.util_types[13], 0, g.util_types)
      print()

      io.write("V"..n..": ")
      if n >= g.n or n < 0 then
         print("index is out of range!")
      else
         pr_vert(g.vertices+n, 1, g.util_types)
         print()
      end
      gb_graph.gb_recycle(g)
   end
end


pr_vert = function (v, l, s)
   if v == NULL then
      printf("NULL")
   elseif gb_gates.is_boolean(v) then
      printf("ONE")
   else
      printf("\"%s\"", str(v.name))
      pr_util(v.u, s[0], l-1, s)
      pr_util(v.v, s[1], l-1, s)
      pr_util(v.w, s[2], l-1, s)
      pr_util(v.x, s[3], l-1, s)
      pr_util(v.y, s[4], l-1, s)
      pr_util(v.z, s[5], l-1, s)
      if l > 0 then
         local a = v.arcs
         while a ~= NULL do
            printf("\n   ")
            pr_arc(a, 1, s)
            a = a.next
         end
      end
   end
end


pr_arc = function (a, l, s)
   printf("->");
   pr_vert(a.tip, 0, s);
   if l > 0 then
      printf(", %d", tonumber(a.len))
      pr_util(a.a, s[6], l-1, s)
      pr_util(a.b, s[7], l-1, s)
   end
end


pr_util = function (u, c, l, s)
   if c == string.byte('I') then
      printf("[%d]", tonumber(u.I))
   elseif c == string.byte('S') then
      printf("[\"%s\"]", u.S ~= NULL and ffi.string(u.S) or "(null)")
   elseif c == string.byte('A') then
      if l < 0 then return end
      printf("[");
      if u.A == NULL then
         printf("NULL")
      else
         pr_arc(u.A, l, s)
      end
      printf("]")
   elseif c == string.byte('V') then
      if l < 0 then return end
      printf("[")
      pr_vert(u.V, l, s)
      printf("]")
   end
end


-- main
local dst = ffi.new("long[?]", 3, {0x20000000,0x10000000,0x10000000})
local wt_vector = ffi.new("long[?]", 9,  
                          {100,-80589,50000,18935,-18935,18935,18935,18935,18935})

print("GraphBase samples generated by test_sample:")

local g = gb_rand.random_graph(3, 10, 1, 1, 0, NULL, dst, 1, 2, 1)
local gg = gb_basic.complement(g, 1, 1, 0)
local v = ffi.cast("Vertex*", gb_graph.gb_typed_alloc(1, ffi.typeof("Vertex"), gg.data))
v.name = gb_graph.gb_save_string"Testing"
gg.util_types[10] = string.byte"V"
gg.ww.V = v
gb_save.save_graph(gg, "test.gb")
gb_graph.gb_recycle(g)
gb_graph.gb_recycle(gg)


print_sample(gb_raman.raman(31, 3, 0, 4), 4)

print_sample(gb_basic.board(1, 1, 2, -33, 1, -0x40000000-0x40000000, 1), 2000)

print_sample(gb_basic.subsets(32, 18, 16, 0, 999, -999, 0x80000000, 1), 1)

g = gb_save.restore_graph("test.gb");
local i = gb_rand.random_lengths(g, 0, 10, 12, dst, 2)
if i ~= 0 then
   printf("\nFailure code %ld returned by random_lengths!\n", i)
else
   gg = gb_rand.random_graph(3, 10, 1, 1, 0, NULL, dst, 1, 2, 1)
   print_sample(gb_basic.gunion(g, gg, 1, 0), 2)
   gb_graph.gb_recycle(g)
   gb_graph.gb_recycle(gg)
end

print_sample(gb_gates.partial_gates(gb_gates.risc(0), 1, 43210, 98765, NULL), 79)

print_sample(gb_books.book("homer", 500, 400, 2, 12, 10000, -123456, 789),81)
print_sample(gb_econ.econ(40, 0, 400, -111), 11)
print_sample(gb_games.games(60 ,70, 80, -90, -101, 60, 0,999999999), 14)
print_sample(gb_miles.miles(50, -500, 100, 1, 500, 5, 314159), 20)
print_sample(gb_lisa.plane_lisa(100, 100, 50, 1, 300, 1, 200,
                                50*299*199, 200*299*199), 1294)
print_sample(gb_plane.plane_miles(50 ,500, -100, 1, 1, 40000, 271818), 14)
print_sample(gb_rand.random_bigraph(300, 3, 1000, -1, NULL, dst, -500, 500, 666), 3)
print_sample(gb_roget.roget(1000, 3, 1009, 1009), 40)

print_sample(gb_words.words(100, wt_vector, 70000000, 69), 5)
wt_vector[1] = wt_vector[1] + 1
print_sample(gb_words.words(100, wt_vector, 70000000, 69), 5)
print_sample(gb_words.words(0, NULL, 0, 69), 5555)
