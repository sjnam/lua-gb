local ffi = require "ffi"
local gb_graph = require "gb.graph"
local gb_io = require "gb.io"
local gb_books = require "gb.books"
local gb_gates = require "gb.gates"
local gb_save = require "gb.save"
local gb = ffi.load "gb"
local print = print
local tonumber = tonumber
local str = ffi.string
local ffi_new = ffi.new
local ffi_cast = ffi.cast
local ffi_load = ffi.load
local byte = string.byte
local io_write = io.write
local save_graph = gb_save.save_graph
local restore_graph = gb_save.restore_graph
local gb_typed_alloc = gb_graph.gb_typed_alloc
local gb_save_string = gb_graph.gb_save_string


local function printf (...)
   io_write(string.format(...))
end


local pr_vert, pr_arc, pr_util


local function print_sample (g, n)
   print()
   if g == nil then
      print("Ooops, we just ran into panic code "..tonumber(gb.panic_code).."!")
      if tonumber(gb.io_errors) ~= 0 then
         print("(The I/O error code is 0x"..tonumber(gb.io_errors))
      end
   else
      printf("\"%s\"\n%d vertices, %d arcs, util_types %s",
             str(g.id), tonumber(g.n), tonumber(g.m), str(g.util_types))
      pr_util(g.uu, g.util_types[8], 0, g.util_types)
      pr_util(g.vv, g.util_types[9], 0, g.util_types)
      pr_util(g.ww, g.util_types[10], 0, g.util_types)
      pr_util(g.xx, g.util_types[11], 0, g.util_types)
      pr_util(g.yy, g.util_types[12], 0, g.util_types)
      pr_util(g.zz, g.util_types[13], 0, g.util_types)
      print()

      io_write("V"..n..": ")
      if n >= g.n or n < 0 then
         print("index is out of range!")
      else
         pr_vert(g.vertices+n, 1, g.util_types)
         print()
      end
      gb.gb_recycle(g)
   end
end


pr_vert = function (v, l, s)
   if v == nil then
      io_write("NULL")
   elseif gb_gates.is_boolean(v) then
      io_write("ONE")
   else
      io_write("\""..str(v.name).."\"")
      pr_util(v.u, s[0], l-1, s)
      pr_util(v.v, s[1], l-1, s)
      pr_util(v.w, s[2], l-1, s)
      pr_util(v.x, s[3], l-1, s)
      pr_util(v.y, s[4], l-1, s)
      pr_util(v.z, s[5], l-1, s)
      if l > 0 then
         for a in gb_graph.arcs(v) do
            io_write("\n   ")
            pr_arc(a, 1, s)
         end
      end
   end
end


pr_arc = function (a, l, s)
   io_write("->");
   pr_vert(a.tip, 0, s);
   if l > 0 then
      io_write(", "..tonumber(a.len))
      pr_util(a.a, s[6], l-1, s)
      pr_util(a.b, s[7], l-1, s)
   end
end


pr_util = function (u, c, l, s)
   if c == byte('I') then
      printf("[%d]", tonumber(u.I))
   elseif c == byte('S') then
      printf("[\"%s\"]", u.S ~= nil and str(u.S) or "(null)")
   elseif c == byte('A') then
      if l < 0 then return end
      io_write("[");
      if u.A == nil then
         io_write("NULL")
      else
         pr_arc(u.A, l, s)
      end
      io_write("]")
   elseif c == byte('V') then
      if l < 0 then return end
      io_write("[")
      pr_vert(u.V, l, s)
      io_write("]")
   end
end


-- main
local dst = ffi_new("long[3]", {0x20000000,0x10000000,0x10000000})
local wt_vec = ffi_new("long[9]",
                       {100,-80589,50000,18935,-18935,18935,18935,18935,18935})

print("GraphBase samples generated by test_sample:")

local g = gb.random_graph(3, 10, 1, 1, 0, nil, dst, 1, 2, 1)
local gg = gb.complement(g, 1, 1, 0)
local v = ffi_cast("Vertex*", gb_typed_alloc(1, "Vertex", gg.data))
v.name = gb_save_string("Testing")
gg.util_types[10] = byte("V")
gg.ww.V = v
save_graph(gg, "test.gb")
gb.gb_recycle(g)
gb.gb_recycle(gg)

print_sample(gb.raman(31, 3, 0, 4), 4)

print_sample(gb.board(1, 1, 2, -33, 1, -0x40000000-0x40000000, 1), 2000)

print_sample(gb.subsets(32, 18, 16, 0, 999, -999, 0x80000000, 1), 1)

g = restore_graph("test.gb");
local i = gb.random_lengths(g, 0, 10, 12, dst, 2)
if i ~= 0 then
   printf("\nFailure code %d returned by random_lengths!\n", i)
else
   gg = gb.random_graph(3, 10, 1, 1, 0, nil, dst, 1, 2, 1)
   print_sample(gb.gunion(g, gg, 1, 0), 2)
   gb.gb_recycle(g)
   gb.gb_recycle(gg)
end

print_sample(gb.partial_gates(gb.risc(0), 1, 43210, 98765, nil), 79)

print_sample(gb_books.book("homer", 500, 400, 2, 12, 10000, -123456, 789),81)
print_sample(gb.econ(40, 0, 400, -111), 11)
print_sample(gb.games(60 ,70, 80, -90, -101, 60, 0,999999999), 14)
print_sample(gb.miles(50, -500, 100, 1, 500, 5, 314159), 20)
print_sample(gb.plane_lisa(100, 100, 50, 1, 300, 1, 200,
                        50*299*199, 200*299*199), 1294)
print_sample(gb.plane_miles(50 ,500, -100, 1, 1, 40000, 271818), 14)
print_sample(gb.random_bigraph(300, 3, 1000, -1, nil, dst, -500, 500, 666), 3)
print_sample(gb.roget(1000, 3, 1009, 1009), 40)

print_sample(gb.words(100, wt_vec, 70000000, 69), 5)
wt_vec[1] = wt_vec[1] + 1
print_sample(gb.words(100, wt_vec, 70000000, 69), 5)
print_sample(gb.words(0, nil, 0, 69), 5555)
